{
  "name": "App",
  "tagline": "web前端自动化构架工程",
  "body": "# app\r\nweb前端自动化构架工程\r\n\r\n前奏：\r\n\t1,安装nodejs\r\n\t---官网：https://nodejs.org/en/\r\n\r\nGit 操作教程：\r\n\r\n\ta,创建新仓库\r\n\t---创建新文件夹，打开，然后执行\r\n\t---$ git init\r\n\t---以创建新的 git 仓库\r\n\r\n\tb,检出仓库\r\n\t---如下命令以创建一个本地仓库的克隆版本：\r\n\t---$ git clone /path/to/repository\r\n\t---如果是远端服务器上的仓库:\r\n\t---$ git clone username@host:/path/to/repository\r\n\r\n\tc,添加与提交\r\n\t---你可以计划改动（把它们添加到缓存区），使用如下命令：\r\n\t---$ git add <filename>\r\n\t---$ git add *\r\n\t---这是 git 基本工作流程的第一步；使用如下命令以实际提交改动：\r\n\t---$ git commit -m \"代码提交信息\"\r\n\t---现在，你的改动已经提交到了 HEAD，但是还没到你的远端仓库\r\n\r\n\td,推送改动\r\n\t---你的改动现在已经在本地仓库的 HEAD 中了。执行如下命令以将这些改动提交到远端仓库：\r\n\t---$ git push origin master\r\n\t---可以把 master 换成你想要推送的任何分支\r\n\t---如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：\r\n\t---$ git remote add origin <server>\r\n\t---如此你就能够将你的改动推送到所添加的服务器上去了\r\n\r\n\te:分支\r\n\t---分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。\r\n\t---创建一个叫做“feature_x”的分支，并切换过去：\r\n\t---$ git checkout -b feature_x\r\n\t---切换回主分支：\r\n\t---$ git checkout master\r\n\t---再把新建的分支删掉：\r\n\t---$ git branch -d feature_x\r\n\t---除非你将分支推送到远端仓库，不然该分支就是 不为他人所见的：\r\n\t---$ git push origin <branch>\r\n\r\n\tf:更新与合并\r\n\t---要更新你的本地仓库至最新改动，执行：\r\n\t---$ git pull\r\n\t---以在你的工作目录中 获取（fetch） 并 合并（merge） 远端的改动。\r\n\t---要合并其他分支到你的当前分支（例如 master），执行：\r\n\t---$ git merge <branch>\r\n\t---两种情况下，git 都会尝试去自动合并改动。不幸的是，自动合并并非次次都能成功，并可能导致 冲突（conflicts）。 这时候就需要你修改这些文件来人肉合并这些 \t       \r\n\t   冲突（conflicts）了。改完之后，你需要执行如下命令以将它们标记为合并成功：\r\n\t---$ git add <filename>\r\n\t---在合并改动之前，也可以使用如下命令查看：\r\n\t---$ git diff <source_branch> <target_branch>\r\n\r\n\tg:标签\r\n\t---在软件发布时创建标签，是被推荐的。这是个旧有概念，在 SVN 中也有。可以执行如下命令以创建一个叫做 1.0.0 的标签：\r\n\t---$ git tag 1.0.0 1b2e1d63ff\r\n\t---1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。使用如下命令获取提交 ID：\r\n\t---$ git log\r\n\t---你也可以用该提交 ID 的少一些的前几位，只要它是唯一的。\r\n\r\n\th:替换本地改动\r\n\t---假如你做错事（自然，这是不可能的），你可以使用如下命令替换掉本地改动：\r\n\t---$ git checkout -- <filename>\r\n\t---此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。\r\n\t---假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：\r\n\t---$ git fetch origin\r\n\t---$ git reset --hard origin/master\r\n\r\n\ti:其他\r\n\t---内建的图形化 git：\r\n\t---$ gitk\r\n\t---彩色的 git 输出：\r\n\t---$ git config color.ui true\r\n\t---显示历史记录时，只显示一行注释信息：\r\n\t---$ git config format.pretty oneline\r\n\t---交互地添加文件至缓存区：\r\n\t---$ git add -i\r\n\r\n\tps：\r\n\t1,$ git add *\r\n\t2,$ git commit -m \"修改 package.json 文件\"\r\n\t3,$ git push origin master\r\n\r\n\r\n----------------------------------------------------------------------------------------------\r\nGrunt  操作教程：\r\n\r\n\ta,安装grunt\r\n\t---$ npm install -g grunt-cli   (客服端  -g:全局安装,注意不是grunt)\r\n\r\n\tb,创建package.json 文件\r\n\t---$ npm init\r\n\r\n\tc:创建Gruntfile.js\r\n\t---其中Gruntfile.js 也可以用 grunt-init 来创建(也可手动),最好是手动:\r\n\t---$ npm install -g grunt-init\r\n\t---$ git clone https://github.com/gruntjs/grunt-init-gruntfile.git ~/.grunt-init/gruntfile\r\n\t---$ grunt-init gruntfile  \r\n\t---手动配置Gruntfile.js  文件:\r\n\t\tmodule.exports = function(grunt) {\r\n\t\t    require('load-grunt-tasks')(grunt); //加载所有的任务\r\n\t\t    // 项目配置\r\n\t\t    grunt.initConfig({\r\n\t\t        pkg: grunt.file.readJSON('package.json'),\r\n\t\t        //开始\r\n\t\t        //监听文件等\r\n\t\t        watch: {\r\n\t\t            livereload: {\r\n\t\t                options: {\r\n\t\t                    livereload: true\r\n\t\t                },\r\n\t\t                files: 'src',\r\n\t\t            },\r\n\t\t        },\r\n\t\t        //合并\r\n\t\t        connect: {\r\n\t\t            options: {\r\n\t\t                // port: 9000,\r\n\t\t                // hostname: '*', //默认就是这个值，可配置为本机某个 IP，localhost 或域名\r\n\t\t                // livereload: 35729 //声明给 watch 监听的端口\r\n\t\t                livereload: true\r\n\t\t            },\r\n\t\t            server: {\r\n\t\t                options: {\r\n\t\t                    open: true, //自动打开网页 http://\r\n\t\t                    base: [\r\n\t\t                        'src' //主目录\r\n\t\t                    ]\r\n\t\t                }\r\n\t\t            }\r\n\t\t        },\r\n\t\t        //结束\r\n\t\t    });\r\n\t\t    // 默认任务\r\n\t\t    grunt.registerTask('default', ['connect:server', 'watch']);\r\n\t\t}\r\n\r\n\r\n\t\td,安装grunt及插件\r\n\t\t---grunt：grunt入口\r\n\t\t---$ npm install grunt --save-dev  (安装grunt到项目)\r\n\r\n\t\t---load-grunt-tasks:自动加载所有任务task,如果没有则每个task都需引入\r\n\t\t---$ npm install load-grunt-tasks --save-dev \r\n\r\n\t\t---grunt-contrib-watch：监听task(如文件变化)\r\n\t\t---$npm install grunt-contrib-watch --save-dev\r\n\r\n\t\t---grunt-contrib-livereload:浏览器打开\r\n\t\t---npm install grunt-contrib-livereload --save-dev\r\n\r\n\t\t---grunt-contrib-connect ：文件合并\r\n\t\t---npm install grunt-contrib-connect --save-dev\r\n\r\n\t\t---grunt-contrib-less:less预编译\r\n\t\t--- npm install grunt-contrib-less --save-dev\r\n\r\n\r\n\t\tps:如果浏览器打开编码自动刷新需要三个：grunt-contrib-watch,grunt-contrib-connect,grunt-contrib-livereload  (网上大部分教程都需要安装浏览器插件)\r\n\t\t---(如果按照上面配置 直接命令：grunt   会自动打开http:localhsot:8000   你可修改或编辑 html等文件查看变化 对双屏显示器来说再好不过了)\r\n\r\n\r\n\r\n\t\t目录结构：\r\n\t\t-app(根目录)\r\n\t\t---.git  (git文件)\r\n\t\t---node_modules(自动生成包含grunt及插件)\r\n\t\t---src(项目源文件)\r\n\t\t---Gruntfile.js(grunt配置文件)\r\n\t\t---package.json(项目配置文件)\r\n\t\t---README.md(描述文档)\r\n-------------------------------------------------------------------------------------------------------\r\n\r\nGitHub  SSH KEY 配置：(如果配置发生意外错误,可以按以下步骤完成)\r\n\r\n\tGenerating SSH keys  可参考：https://help.github.com/articles/generating-ssh-keys/\r\n\r\n\ta,Step 1: Check for SSH keys:(检查SSH key)\r\n\t---$ ls -al ~/.ss\r\n\r\n\tb,Step 2: Generate a new SSH key:(创建新的SSH key)\r\n\t---$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\r\n\r\n\tc,Step 3: Add your key to the ssh-agent: (增加你的密钥到ssh-agent)\r\n\t---$ ssh-agent -s\r\n\t---$ eval $(ssh-agent -s)\r\n\t---$ ssh-add ~/.ssh/id_rsa\r\n\r\n\td,Step 4: Add your SSH key to your account:(添加密钥到账户)\r\n\t---$ clip < ~/.ssh/id_rsa.pub\r\n\t---(1) 点击最右侧头像（view profile and more）->setting->\r\n\t---(2)点击左侧栏 SSH keys. \r\n\t---(3)点击 Add SSH key.   (框一：输入一个名称->可任意)(框二：打开 github_rsa.pub  复制信息粘贴到此处)\r\n\t---(4)点击 Add key  ok 完成\r\n\r\n\te,Step 5: Test the connection:(测试信息是否正确)\r\n\t---$ ssh -T git@github.com",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}